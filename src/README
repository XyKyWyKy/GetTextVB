GetTextVB: gettext work-alike for VB, version 0
Requirements:
    this is a COM DLL, so should be binary compatible with any COM client
    (VB, VBScript, .NET?)

This is, in my opinion, the best way to internationalize your application SIMPLY.
The conversion process is simple, the development process is simple. There are some
major features missing here, notably bidirectional support. Maybe that will be
addressed in a future version (by someone else..?)

This is a partial work-alike of GNU gettext (http://www.gnu.org/software/gettext/)
It is simplified to an extreme, but it is still useful - certainly more useful
than having no i18n at all because it's too much trouble!

INSTALL:

   Copy the DLL to any folder (usually system32) and register it as a COM DLL.

USAGE:

 * Developers:

      Insert user interface strings directly in your code. No need to create
      resource strings tables etc. Just wrap any user interface strings which need
      to be international with the sT_() function! Any strings inside a call to
      sT_() will be extracted into a template translator's file (using an external
      application, or simple grep). sT_() is easy to use and adds formatting
      features; you will find developing with GetTextVB a pleasure.

      Sample pseudo-code:

         SetMenuText MenuID:=CTX_OPENFOLDER, Caption:=sT_("Open &Parent Folder")

         MsgBox (sT_("Are you sure you want to delete '%1'?", filename), [...]

      You can use the formatting features without translation by calling sExp();
      this is for error messages which need to be relayed to tech support verbatim.

      Sample pseudo-code:

         Err.Raise sExp("Error at line %1 accessing '%2': %3", _
                         lineno, filename, Err.Description)

      Special codes in message strings:

          - insert arguments (sprintf-like) with <%1>, <%2>, etc:
                Example: sT_("Are you sure you want to delete '%1'?", filename)
          - embed a carriage return with <%n>
          - embed a Tab character with <%t>
                some programs use the Tab character in menu items to set the
                keyboard shortcut (see my forthcoming MenuA project)
          - enter "comment" mode with <%z>; any text after "%z" will not
                be shown in the program; often seen as %z//<comment>
          - make an accelerator key for control & menu items with <&> (eg, "&Open")
          - escape literal "%" characters by doubling, ie <%%>
          - escape literal "&" characters by doubling, ie <&&>
          - escape the double-quote character by doubling, ie <"">

      Here is the doc comment for sT_():

      '** translate strings, with formatting:
      '   look up translated msg using argument "s" as key;
      '   insert args(0) into translated msg in place of '%1',
      '   args(1) in place of '%2', etc.
      '
      '  - escape literal "%" characters by doubling, ie "%%"
      '  - embed a carriage return with "%n"
      '  - embed a tab character with "%t"
      '  - enter "comment" mode with "%z"
      '     (stop processing; text after "%z" not passed to output;
      '      useful for passing note to translator)
      '
      Function sT_(ByVal s As String, ParamArray args() As Variant) As String

      The only other thing needed is a call to sT_Init() on startup, to load the
      translated strings.

      Here is the doc comment for sT_Init():

      '** set language and other options; call this first, *before* calling sT_()
      '
      '@param OptionID - set underlying method for loading strings
      '    (this argument is currently IGNORED; set to 0 for compatibility
      '     with future versions)
      '
      '@param sLanguage  - set language for loading strings; see discussion.
      '
      '@param sPath      - set root folder for strings; see discussion.
      '
      'DISCUSSION:
      '   Only one method for loading translation strings is implemented,
      '   and that is by reading a special text file; the file consists of
      '   pairs of lines, as follows:
      '       msgid "original string argument to sT_() function"
      '       msgstr ""
      '
      '   If there is a string supplied for <msgstr> it will be shown to
      '   the user in place of the original; if not, the original will
      '   be shown. In either case, formatting is done as explained elsewhere.
      '
      '   The file path is determined as:
      '       <sPath>"\"<sLanguage>"-po.txt"
      '
      '   where <sPath> defaults to <application directory>"\Lang",
      '   but may be overridden with the sPath argument.
      '
      '   NOTE: if sT_Init() is called in a DLL, or from the development
      '   environment, the value of <application path> is not certain; in these
      '   cases it is best to set an explicit path.
      '
      '   and <sLanguage> defaults to the value in the Registry under:
      '       <current user>\Control Panel\International\sLanguage="..."
      '   but may be overridden with the sLanguage argument.
      '
      '   So if sLanguage="ENU", and the application folder is "C:\MyProgram",
      '   GetTextVB will by default look for "C:\MyProgram\Lang\ENU-po.txt"
      '
      '@return True on success, False on failure
      '   If this routine fails, the caller can try again with different arguments.
      '   If this routine does not succeed (or is never called) the user will see
      '   the UI strings as hard-coded in the application.
      '
      Function sT_Init(ByVal OptionID As Long, _
                       Optional ByVal sLanguage As String = "", _
                       Optional ByVal sPath = "") As Boolean

 * Translators:

      Sample translation-file entry: (translating to bad Spanish);
      note source code is included for context.

          ; E:\Projects\vb\_root\D-F\FindInFiles\v-1.7\Find3c.frm(2414)
          ; CTX_LVW_OPENFOLDER, sT_("Open &Parent Folder"), _
          msgid "Open &Parent Folder"
          msgstr "Abra del &Padre"

      This would probably be saved as "ES-po.txt"

 * Deployment:

      Assuming you are using the default path, you place the translation file(s)
      in the "Lang" directory under the application install directory; each file
      must be named "<language>-po.txt"

      Example: if language is "ES", save translation file as
      "<App.Path>\Lang\ES-po.txt")

      The program looks for the default language under
      <current user>\Control Panel\International
      under the keyname "sLanguage"

      You can override the default language and directory in code with sT_Init()
      (see above)

SUPPORT:
    gettextvb@cad2data.com

APPRECIATION:
    This is an extremely simplified work-alike of GNU gettext.
    gettext is copyrighted by the Free Software Foundation, Inc.
    http://www.gnu.org/software/gettext/
    It is hoped a fully compatible version can be developed to bring
    gettext to all COM-compatible applications.

TODO:
    This will not correctly parse actual GNU gettext .po files
     eg, .po has embedded newlines in strings (etc? need to obtain .po grammar)

copyright 2012 Lindsay Bigelow (aka raffriff aka XyKyWyKy)

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
